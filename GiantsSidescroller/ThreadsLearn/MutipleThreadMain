package ThreadsLearn;

import ThreadsLearn.ThreadColor;

/*
Here we are creating mutipleThreads and looking at the behaviour of it

So here when we are using threads we do not know when one will run or will get suspended  for the other to run
It depends on the operating system
 */
public class MutipleThreadMain {
    public static void main(String[] args) {

        CountDown countDown = new CountDown();
        CountdownThread t1 = new CountdownThread(countDown);// Initializing the countDown thread 1
        t1.setName("Thread 1");// providing the name to that thread // inbuilt method
        CountdownThread t2 = new CountdownThread(countDown);
        t2.setName("Thread 2");

        t1.start();// starting the thread 1
        t2.start();

    }



}
/*
checks if it is thread 1 or 2
then print it 10 times
 */
class CountDown{

    private int  i;// the resulted changed drastically when i put the instance variable

    /*
    When working with threads remember that threads share the same object hence data that is stored in the heap
    that is why we see this behaviour when we introduced the member variable

    so when one thread updated the value of the member variable other thread saw the updated variable

    Note One thread cannot access other thread's space
     */

    public  void doCountDown(){// synchronized allow one thread to finish its task first before another thread could use it.
        String color;

        switch (Thread.currentThread().getName()){
            case "Thread 1":
                color = ThreadColor.ANSI_RED;
            break;
            case "Thread 2":
                color  =ThreadColor.ANSI_PURPLE;
                break;
            default:
                color = ThreadColor.ANSI_GREEN;
        }

        synchronized(this) {// LOCAL variables does not do well synchrnization
            for (i = 10; i > 0; i--) {
                System.out.println(color + Thread.currentThread().getName() + ":i = " + i);
            }
        }
    }
}

class CountdownThread extends Thread{
    private CountDown threadCountdown;

    public CountdownThread(CountDown countDown){
        threadCountdown = countDown;
    }

    public void run(){
        threadCountdown.doCountDown();
    }
}